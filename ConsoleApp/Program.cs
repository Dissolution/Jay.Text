using System;
using System.Diagnostics;
using System.Linq;
using Jay.Text.Scratch;
using Jay.Text.Scratch.AppendExtensions;
using Jay.Text.Scratch.EnumerableExtensions;
using Jay.Text.Scratch.WrittenExtensions;
using Jay.Text.Scratch.InterpolatedExtensions;
using Jay.Text.Scratch.WriteExtensions;

//TextWriter console = Console.Out;

#if NET6_0_OR_GREATER

var zeroToTen = Enumerable.Range(0, 10);

StackTextBuilder textBuilder = new StackTextBuilder();
textBuilder.AppendLine("    Hey, ya!")
    .Delimit(zeroToTen,
        static (ref StackTextBuilder tb) =>
        {
            tb.Append('\r');
            tb.Append('\n');
        },
        static (ref StackTextBuilder tb, int i) => tb.Append<int>(i))
    .AppendLine("  klha  _   ")
    .TrimStart()
    .TrimEnd()
    .AppendLine().AppendLine()
    .Interpolate($"Hey there, {"Joe"}")
    .AppendLine()
    .Append($"What's going on?");

string str = textBuilder.ToStringAndDispose();
Debugger.Break();

#endif
/*


using var writer = new CodeBuilder();

int id = 147;

writer.AutoGeneratedHeader()
    .Namespace("Jay.Text")
    .NewLine()
    .AppendLine("public class TestClass")
    .BracketBlock(cl =>
    {
        cl.AppendLine("public TestClass()")
            .BracketBlock(ctor =>
            {
                ctor.AppendLine("Console.WriteLine(\"Hey\");");
            })
            .NewLine()
            .FormatLine($$"""
                public int DoTheThing()
                {
                    return {{id}};
                }
                {{(CBA)(w => w.AppendLine("Do the Bart, Man!"))}}
                """)
            .AppendLine("public override int GetHashCode()")
            .BracketBlock(m =>
            {
                m.AppendLine("return 0;");
            });
    });

string code = writer.ToString();

Console.WriteLine(code);
*/
//
// string testString = """
//
//     Think I'm a genius
//
//     Bend computers to my will  
//
//
//       I just google stuff
//          _    
//     """;
//
// // var splits = TextHelper.SplitRanges(testString, "i", comparison: StringComparison.OrdinalIgnoreCase);
// // var splitsStrings = splits.Select(range => testString.Substring(range.Start, range.Length)).ToList();
//
// StringSplitOptions splitOptions = (StringSplitOptions)3;
// StringComparison stringComparison = StringComparison.Ordinal;
//
// foreach (var text in testString.TextSplit(Environment.NewLine, splitOptions, stringComparison))
// {
//     console.WriteLine($"\"{text.ToString()}\"");
// }
//
// console.WriteLine("-------------");
//
// foreach (var range in testString.RangeSplit(Environment.NewLine, splitOptions, stringComparison))
// {
//     console.WriteLine($"Range: {range}\t\"{testString[range]}\"");
// }

//Debugger.Break();

//console.WriteLine("Press Enter to close");

// Wait
Console.ReadLine();
