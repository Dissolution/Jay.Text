namespace Jay.Text;

public sealed class CSharpCodeBuilder : CSharpCodeBuilder<CSharpCodeBuilder>
{
    public CSharpCodeBuilder() : base()
    {
    }
}

public abstract class CSharpCodeBuilder<TBuilder> : CodeBuilder<TBuilder>
    where TBuilder : CSharpCodeBuilder<TBuilder>
{
    public string DefaultIndent { get; set; } = "    ";

    protected CSharpCodeBuilder() { }
    
    protected CSharpCodeBuilder(string defaultIndent)
    {
        this.DefaultIndent = defaultIndent;
    }
    
#region Fluent CS File
    /// <summary>
    /// Adds the `// &lt;auto-generated/&gt; ` line, optionally expanding it to include a <paramref name="comment"/>
    /// </summary>
    public TBuilder AutoGeneratedHeader(string? comment = null)
    {
        if (comment is null)
        {
            return WriteLine("// <auto-generated/>");
        }

        var lines = comment.AsSpan().SplitLines();
        return WriteLine("// <auto-generated>")
            .IndentBlock("// ",
                ib =>
                {
                    foreach (var (start, length) in lines)
                    {
                        ib.WriteLine(comment.AsSpan(start, length));
                    }
                })
            .WriteLine("// </auto-generated>");
    }

    public TBuilder Nullable(bool enable)
    {
        return Write("#nullable ")
            .Write(enable ? "enable" : "disable")
            .NewLine();
    }

    /// <summary>
    /// Writes a `using <paramref name="nameSpace"/>;` line
    /// </summary>
    public TBuilder Using(string nameSpace)
    {
        ReadOnlySpan<char> ns = nameSpace.AsSpan();
        ns = ns.TrimStart("using ".AsSpan()).TrimEnd(';');
        return Write("using ").Write(ns).Write(';').NewLine();
    }

    /// <summary>
    /// Writes multiple <see cref="Using(string)"/> <paramref name="namespaces"/>
    /// </summary>
    public TBuilder Using(params string[] namespaces)
    {
        foreach (var nameSpace in namespaces)
        {
            Using(nameSpace);
        }

        return _this;
    }

    public TBuilder Namespace(string? nameSpace)
    {
        if (!string.IsNullOrWhiteSpace(nameSpace))
        {
            return Write("namespace ").Write(nameSpace).WriteLine(';');
        }

        return _this;
    }


    /// <summary>
    /// Writes the given <paramref name="comment"/> as a comment line / lines
    /// </summary>
    public TBuilder Comment(string? comment)
    {
        /* Most of the time, this is probably a single line.
         * But we do want to watch out for newline characters to turn
         * this into a multi-line comment */
        var lines = comment.AsSpan().SplitLines();
        switch (lines.Count)
        {
            case 0:
                // Empty comment
                return WriteLine("// ");
            case 1:
                // Single line
                return Write("// ").WriteLine(comment);
            default:
            {
                using var e = lines.GetEnumerator();
                e.MoveNext();
                Write("/* ").WriteLine(comment.AsSpan(e.Current.start, e.Current.length));
                while (e.MoveNext())
                {
                    Write(" * ").WriteLine(comment.AsSpan(e.Current.start, e.Current.length));
                }

                return WriteLine(" #1#");
            }
        }
    }

    public TBuilder Comment(string? comment, CommentType commentType)
    {
        var lines = comment.AsSpan().SplitLines();
        if (commentType == CommentType.SingleLine)
        {
            foreach (var (start, length) in lines)
            {
                Write("// ").WriteLine(comment.AsSpan(start, length));
            }
        }
        else if (commentType == CommentType.XML)
        {
            foreach (var (start, length) in lines)
            {
                Write("/// ").WriteLine(comment.AsSpan(start, length));
            }
        }
        else
        {
            using var e = lines.GetEnumerator();
            e.MoveNext();
            Write("/* ").WriteLine(comment.AsSpan(e.Current.start, e.Current.length));
            while (e.MoveNext())
            {
                Write(" * ").WriteLine(comment.AsSpan(e.Current.start, e.Current.length));
            }

            return WriteLine(" #1#");
        }

        return _this;
    }
#endregion

    public TBuilder IndentBlock(TextBuilderAction<TBuilder> indentBlock) => base.IndentBlock(this.DefaultIndent, indentBlock);

    protected void TrimEnd()
    {
        var written = Written;
        for (var i = written.Length - 1; i >= 0; i--)
        {
            if (!char.IsWhiteSpace(written[i]))
            {
                this.Length = (i + 1);
                return;
            }
        }
        this.Length = 0;
    }

    public TBuilder BracketBlock(TextBuilderAction<TBuilder> bracketBlock, string? indent = null)
    {
        indent ??= this.DefaultIndent;
        // Trim all trailing whitespace
        TrimEnd();
        NewLine()
            .WriteLine('{')
            .IndentBlock(indent, bracketBlock);
        if (!Written.EndsWith(_newLineIndent.AsSpan()))
        {
            NewLine();
        }
        return Write('}');
    }
}