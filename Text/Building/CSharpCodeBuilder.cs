namespace Jay.Text.CSharpCodeBuilderExtensions;

public static class CSharpCodeBuilderExtensions
{
    public static string DefaultIndent { get; set; } = "    ";

#region Fluent CS File
    /// <summary>
    /// Adds the `// &lt;auto-generated/&gt; ` line, optionally expanding it to include a <paramref name="comment"/>
    /// </summary>
    public static CodeBuilder AutoGeneratedHeader(this CodeBuilder codeBuilder, string? comment = null)
    {
        if (comment is null)
        {
            return codeBuilder.WriteLine("// <auto-generated/>");
        }

        var lines = comment.AsSpan().SplitLines();
        return codeBuilder
            .WriteLine("// <auto-generated>")
            .IndentBlock("// ",
                ib =>
                {
                    foreach (var (start, length) in lines)
                    {
                        ib.WriteLine(comment.AsSpan(start, length));
                    }
                })
            .WriteLine("// </auto-generated>");
    }

    public static CodeBuilder Nullable(this CodeBuilder codeBuilder, bool enable)
    {
        return codeBuilder
            .Write("#nullable ")
            .Write(enable ? "enable" : "disable")
            .NewLine();
    }

    /// <summary>
    /// Writes a `using <paramref name="nameSpace"/>;` line
    /// </summary>
    public static CodeBuilder Using(this CodeBuilder codeBuilder, string nameSpace)
    {
        ReadOnlySpan<char> ns = nameSpace.AsSpan();
        ns = ns.TrimStart("using ".AsSpan()).TrimEnd(';');
        return codeBuilder.Write("using ").Write(ns).Write(';').NewLine();
    }

    /// <summary>
    /// Writes multiple <see cref="Using(string)"/> <paramref name="namespaces"/>
    /// </summary>
    public static CodeBuilder Using(this CodeBuilder codeBuilder, params string[] namespaces)
    {
        foreach (var nameSpace in namespaces)
        {
            Using(codeBuilder, nameSpace);
        }

        return codeBuilder;
    }

    public static CodeBuilder Namespace(this CodeBuilder codeBuilder, string? nameSpace)
    {
        if (!string.IsNullOrWhiteSpace(nameSpace))
        {
            return codeBuilder.Write("namespace ").Write(nameSpace).WriteLine(';');
        }

        return codeBuilder;
    }


    /// <summary>
    /// Writes the given <paramref name="comment"/> as a comment line / lines
    /// </summary>
    public static CodeBuilder Comment(this CodeBuilder codeBuilder, string? comment)
    {
        /* Most of the time, this is probably a single line.
         * But we do want to watch out for newline characters to turn
         * this into a multi-line comment */
        var lines = comment.AsSpan().SplitLines();
        switch (lines.Count)
        {
            case 0:
                // Empty comment
                return codeBuilder.WriteLine("// ");
            case 1:
                // Single line
                return codeBuilder.Write("// ").WriteLine(comment);
            default:
            {
                using var e = lines.GetEnumerator();
                e.MoveNext();
                codeBuilder.Write("/* ").WriteLine(comment.AsSpan(e.Current.start, e.Current.length));
                while (e.MoveNext())
                {
                    codeBuilder.Write(" * ").WriteLine(comment.AsSpan(e.Current.start, e.Current.length));
                }

                return codeBuilder.WriteLine(" #1#");
            }
        }
    }

    public static CodeBuilder Comment(this CodeBuilder codeBuilder, string? comment, CommentType commentType)
    {
        var lines = comment.AsSpan().SplitLines();
        if (commentType == CommentType.SingleLine)
        {
            foreach (var (start, length) in lines)
            {
                codeBuilder.Write("// ").WriteLine(comment.AsSpan(start, length));
            }
        }
        else if (commentType == CommentType.XML)
        {
            foreach (var (start, length) in lines)
            {
                codeBuilder.Write("/// ").WriteLine(comment.AsSpan(start, length));
            }
        }
        else
        {
            using var e = lines.GetEnumerator();
            e.MoveNext();
            codeBuilder.Write("/* ").WriteLine(comment.AsSpan(e.Current.start, e.Current.length));
            while (e.MoveNext())
            {
                codeBuilder.Write(" * ").WriteLine(comment.AsSpan(e.Current.start, e.Current.length));
            }

            return codeBuilder.WriteLine(" #1#");
        }

        return codeBuilder;
    }
#endregion

    public static CodeBuilder IndentBlock(this CodeBuilder codeBuilder, TextBuilderAction<CodeBuilder> indentBlock)
        => codeBuilder.IndentBlock(DefaultIndent, indentBlock);


    public static CodeBuilder BracketBlock(this CodeBuilder codeBuilder, TextBuilderAction<CodeBuilder> bracketBlock, string? indent = null)
    {
        indent ??= DefaultIndent;
        // Trim all trailing whitespace
        codeBuilder.TrimEnd();
        codeBuilder.NewLine()
            .WriteLine('{')
            .IndentBlock(indent, bracketBlock);
        if (!codeBuilder.Written.EndsWith(codeBuilder._newLineIndent.AsSpan()))
        {
            codeBuilder.NewLine();
        }
        return codeBuilder.Write('}');
    }
}